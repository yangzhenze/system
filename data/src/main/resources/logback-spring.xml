<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!-- 定义日志文件的存储地址 -->
    <!--<property name="LOG_HOME" value="/var/tmp/website-blog-web"/>-->
    <springProperty scope="context" name="logdir" source="logging.file.path"/>


    <!--
        %p:输出优先级，即DEBUG,INFO,WARN,ERROR,FATAL
        %r:输出自应用启动到输出该日志讯息所耗费的毫秒数
        %t:输出产生该日志事件的线程名
        %f:输出日志讯息所属的类别的类别名
        %c:输出日志讯息所属的类的全名
        %d:输出日志时间点的日期或时间，指定格式的方式： %d{yyyy-MM-dd HH:mm:ss}
        %l:输出日志事件的发生位置，即输出日志讯息的语句在他所在类别的第几行。
        %m:输出代码中指定的讯息，如log(message)中的message
        %n:输出一个换行符号
    -->
    <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度 %msg：日志消息，%n是换行符-->
    <property name="pattern" value="%black(控制台-) %red(%d{yyyy-MM-dd HH:mm:ss.SSS}) %green([%thread]) %blue([%class:%line]) %highlight(%-5level) - %cyan(%msg%n)"/>

    <!--<pattern name="pattern" value="%black(控制台-) %red(%d{yyyy-MM-dd HH:mm:ss}) %green([%thread]) %highlight(%-5level) %boldMagenta(%logger{10}) - %cyan(%msg%n)"></pattern>-->


    <!-- 控制台 appender -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 对记录事件进行格式化 -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${pattern}</pattern>
        </encoder>
    </appender>

    <!--按天生成日志-->
    <!-- 出错日志 appender -->
    <appender name="FILE_ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建 -->
        <File>${logdir}/error.log</File>
        <!-- 当发生滚动时，决定RollingFileAppender的行为，涉及文件移动和重命名。属性class定义具体的滚动策略类 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 按天回滚 daily -->
            <fileNamePattern>${logdir}/error-%d{yyyy-MM-dd}.log</fileNamePattern>
            <!-- 日志最大的历史 30天 -->
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>${pattern}</pattern>
        </encoder>
        <!-- LevelFilter： 级别过滤器，根据日志级别进行过滤 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter"><!-- 只打印错误日志 -->
            <level>ERROR</level>
            <!-- 用于配置符合过滤条件的操作 ACCEPT：日志会被立即处理，不再经过剩余过滤器 -->
            <onMatch>ACCEPT</onMatch>
            <!-- 用于配置不符合过滤条件的操作 DENY：日志将立即被抛弃不再经过其他过滤器 -->
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>
    <!-- info日志 appender -->
    <appender name="FILE_INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <File>${logdir}/info.log</File>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 按天回滚 daily -->
            <fileNamePattern>${logdir}/info-%d{yyyy-MM-dd}.log
            </fileNamePattern>
            <!-- 日志最大的历史 30天 -->
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>${pattern}</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter"><!-- 只打印错误日志 -->
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- info日志 appender -->
    <appender name="FILE_DEBUG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <File>${logdir}/debug.log</File>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 按天回滚 daily -->
            <fileNamePattern>${logdir}/debug-%d{yyyy-MM-dd}.log
            </fileNamePattern>
            <!-- 日志最大的历史 30天 -->
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>${pattern}</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter"><!-- 只打印错误日志 -->
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <appender name="FILE_HTML" class="ch.qos.logback.core.FileAppender">
        <encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
            <layout class="ch.qos.logback.classic.html.HTMLLayout">
                <pattern>%d{yyyyMMdd:HH:mm:ss.SSS}%thread%-5level%F{32}%M%L%msg</pattern>
            </layout>
        </encoder>
        <File>${logdir}/log.html</File>
    </appender>


    <logger name="org.springframework.core.env" level="ERROR"/>

    <!-- 测试环境+开发环境，日志级别为INFO且不写日志文件 -->
    <springProfile name="dev">
        <!-- 开启包下debug输出 -->
        <logger name="com.swsk" level="DEBUG"/>
       <!-- <logger name="com.swsk" additivity="false">
            <appender-ref ref="STDOUT"/>
        </logger>-->

        <logger name="com.swsk" additivity="false">
            <appender-ref ref="STDOUT"/>
            <appender-ref ref="FILE_ERROR" />
            <appender-ref ref="FILE_DEBUG"/>
            <appender-ref ref="FILE_INFO" />
        </logger>


        <root level="INFO">
            <appender-ref ref="STDOUT"/>
            <appender-ref ref="FILE_ERROR" />
            <appender-ref ref="FILE_INFO" />
        </root>

        <!--<root level="WARN">
            <appender-ref ref="STDOUT"/>
            <appender-ref ref="FILE_ERROR" />
            <appender-ref ref="FILE_INFO" />
            <appender-ref ref="FILE_HTML" />
        </root>-->
    </springProfile>

    <!-- 生产环境. 日志级别为WARN且写日志文件-->
    <springProfile name="prod">
        <!--
        用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。
        <loger>仅有一个name属性，一个可选的level和一个可选的addtivity属性
        name:
            用来指定受此logger约束的某一个包或者具体的某一个类。
        level:
            用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
            如果未设置此属性，那么当前logger将会继承上级的级别。
        additivity:
            是否向上级loger传递打印信息。默认是true。
        <logger>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个logger
    -->
        <logger name="com.swsk" additivity="false">
            <appender-ref ref="STDOUT"/>
            <appender-ref ref="FILE_ERROR" />
            <appender-ref ref="FILE_INFO" />
        </logger>

        <root level="WARN">
            <appender-ref ref="STDOUT"/>
            <appender-ref ref="FILE_ERROR" />
            <appender-ref ref="FILE_INFO" />
            <appender-ref ref="FILE_HTML" />
        </root>
    </springProfile>

    <!-- 生产环境. 日志级别为WARN且写日志文件-->
    <springProfile name="test">
        <!--
        用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。
        <loger>仅有一个name属性，一个可选的level和一个可选的addtivity属性
        name:
            用来指定受此logger约束的某一个包或者具体的某一个类。
        level:
            用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
            如果未设置此属性，那么当前logger将会继承上级的级别。
        additivity:
            是否向上级loger传递打印信息。默认是true。
        <logger>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个logger
    -->
        <logger name="com.swsk" additivity="false">
            <appender-ref ref="STDOUT"/>
            <appender-ref ref="FILE_ERROR" />
            <appender-ref ref="FILE_INFO" />
        </logger>

        <root level="WARN">
            <appender-ref ref="STDOUT"/>
            <appender-ref ref="FILE_ERROR" />
            <appender-ref ref="FILE_INFO" />
            <appender-ref ref="FILE_HTML" />
        </root>
    </springProfile>

</configuration>
